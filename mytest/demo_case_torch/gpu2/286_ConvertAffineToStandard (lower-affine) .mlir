
module {
  func.func @main_dispatch_0_matmul_DxDxD_f32() {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32_i64 = arith.constant 32 : i64
    %cst = arith.constant 0.000000e+00 : f32
    %0 = hal.interface.constant.load[0] : i32
    %1 = hal.interface.constant.load[1] : i32
    %2 = hal.interface.constant.load[2] : i32
    %3 = hal.interface.constant.load[3] : i32
    %4 = arith.extui %0 : i32 to i64
    %5 = arith.extui %1 : i32 to i64
    %6 = arith.shli %5, %c32_i64 : i64
    %7 = arith.ori %4, %6 : i64
    %8 = arith.index_castui %7 : i64 to index
    %9 = arith.extui %2 : i32 to i64
    %10 = arith.extui %3 : i32 to i64
    %11 = arith.shli %10, %c32_i64 : i64
    %12 = arith.ori %9, %11 : i64
    %13 = arith.index_castui %12 : i64 to index
    %14 = hal.interface.binding.subspan set(0) binding(0) type(storage_buffer) alignment(64) offset(%c0) flags(ReadOnly) : memref<?x?xf32, #gpu.address_space<global>>{%8, %13}
    memref.assume_alignment %14, 64 : memref<?x?xf32, #gpu.address_space<global>>
    %15 = hal.interface.binding.subspan set(0) binding(1) type(storage_buffer) alignment(64) offset(%c0) : memref<?x?xf32, #gpu.address_space<global>>{%8, %13}
    memref.assume_alignment %15, 64 : memref<?x?xf32, #gpu.address_space<global>>
    %workgroup_id_x = hal.interface.workgroup.id[0] : index
    %c32 = arith.constant 32 : index
    %c128 = arith.constant 128 : index
    %c0_0 = arith.constant 0 : index
    %c1_1 = arith.constant 1 : index
    %16 = arith.cmpi sle, %13, %c0_0 : index
    %17 = arith.subi %c0_0, %13 : index
    %18 = arith.subi %13, %c1_1 : index
    %19 = arith.select %16, %17, %18 : index
    %20 = arith.divsi %19, %c128 : index
    %21 = arith.subi %c0_0, %20 : index
    %22 = arith.addi %20, %c1_1 : index
    %23 = arith.select %16, %21, %22 : index
    %c0_2 = arith.constant 0 : index
    %c-1 = arith.constant -1 : index
    %24 = arith.cmpi slt, %workgroup_id_x, %c0_2 : index
    %25 = arith.subi %c-1, %workgroup_id_x : index
    %26 = arith.select %24, %25, %workgroup_id_x : index
    %27 = arith.divsi %26, %23 : index
    %28 = arith.subi %c-1, %27 : index
    %29 = arith.select %24, %28, %27 : index
    %c-32 = arith.constant -32 : index
    %30 = arith.muli %29, %c-32 : index
    %31 = arith.addi %8, %30 : index
    %32 = arith.cmpi slt, %c32, %31 : index
    %33 = arith.select %32, %c32, %31 : index
    %c128_3 = arith.constant 128 : index
    %c128_4 = arith.constant 128 : index
    %c0_5 = arith.constant 0 : index
    %c1_6 = arith.constant 1 : index
    %34 = arith.cmpi sle, %13, %c0_5 : index
    %35 = arith.subi %c0_5, %13 : index
    %36 = arith.subi %13, %c1_6 : index
    %37 = arith.select %34, %35, %36 : index
    %38 = arith.divsi %37, %c128_4 : index
    %39 = arith.subi %c0_5, %38 : index
    %40 = arith.addi %38, %c1_6 : index
    %41 = arith.select %34, %39, %40 : index
    %42 = arith.remsi %workgroup_id_x, %41 : index
    %c0_7 = arith.constant 0 : index
    %43 = arith.cmpi slt, %42, %c0_7 : index
    %44 = arith.addi %42, %41 : index
    %45 = arith.select %43, %44, %42 : index
    %c-128 = arith.constant -128 : index
    %46 = arith.muli %45, %c-128 : index
    %47 = arith.addi %13, %46 : index
    %48 = arith.cmpi slt, %c128_3, %47 : index
    %49 = arith.select %48, %c128_3, %47 : index
    %50 = gpu.thread_id  x
    %51 = gpu.thread_id  y
    %c8 = arith.constant 8 : index
    %c0_8 = arith.constant 0 : index
    %c1_9 = arith.constant 1 : index
    %52 = arith.cmpi sle, %33, %c0_8 : index
    %53 = arith.subi %c0_8, %33 : index
    %54 = arith.subi %33, %c1_9 : index
    %55 = arith.select %52, %53, %54 : index
    %56 = arith.divsi %55, %c8 : index
    %57 = arith.subi %c0_8, %56 : index
    %58 = arith.addi %56, %c1_9 : index
    %59 = arith.select %52, %57, %58 : index
    %60 = arith.muli %51, %59 : index
    %c-1_10 = arith.constant -1 : index
    %61 = arith.muli %60, %c-1_10 : index
    %62 = arith.addi %33, %61 : index
    %c8_11 = arith.constant 8 : index
    %c0_12 = arith.constant 0 : index
    %c1_13 = arith.constant 1 : index
    %63 = arith.cmpi sle, %33, %c0_12 : index
    %64 = arith.subi %c0_12, %33 : index
    %65 = arith.subi %33, %c1_13 : index
    %66 = arith.select %63, %64, %65 : index
    %67 = arith.divsi %66, %c8_11 : index
    %68 = arith.subi %c0_12, %67 : index
    %69 = arith.addi %67, %c1_13 : index
    %70 = arith.select %63, %68, %69 : index
    %71 = arith.cmpi slt, %62, %70 : index
    %72 = arith.select %71, %62, %70 : index
    %c0_14 = arith.constant 0 : index
    %73 = arith.cmpi sgt, %c0_14, %72 : index
    %74 = arith.select %73, %c0_14, %72 : index
    %c32_15 = arith.constant 32 : index
    %c0_16 = arith.constant 0 : index
    %c1_17 = arith.constant 1 : index
    %75 = arith.cmpi sle, %49, %c0_16 : index
    %76 = arith.subi %c0_16, %49 : index
    %77 = arith.subi %49, %c1_17 : index
    %78 = arith.select %75, %76, %77 : index
    %79 = arith.divsi %78, %c32_15 : index
    %80 = arith.subi %c0_16, %79 : index
    %81 = arith.addi %79, %c1_17 : index
    %82 = arith.select %75, %80, %81 : index
    %83 = arith.muli %50, %82 : index
    %c-1_18 = arith.constant -1 : index
    %84 = arith.muli %83, %c-1_18 : index
    %85 = arith.addi %49, %84 : index
    %c32_19 = arith.constant 32 : index
    %c0_20 = arith.constant 0 : index
    %c1_21 = arith.constant 1 : index
    %86 = arith.cmpi sle, %49, %c0_20 : index
    %87 = arith.subi %c0_20, %49 : index
    %88 = arith.subi %49, %c1_21 : index
    %89 = arith.select %86, %87, %88 : index
    %90 = arith.divsi %89, %c32_19 : index
    %91 = arith.subi %c0_20, %90 : index
    %92 = arith.addi %90, %c1_21 : index
    %93 = arith.select %86, %91, %92 : index
    %94 = arith.cmpi slt, %85, %93 : index
    %95 = arith.select %94, %85, %93 : index
    %c0_22 = arith.constant 0 : index
    %96 = arith.cmpi sgt, %c0_22, %95 : index
    %97 = arith.select %96, %c0_22, %95 : index
    %c128_23 = arith.constant 128 : index
    %c0_24 = arith.constant 0 : index
    %c1_25 = arith.constant 1 : index
    %98 = arith.cmpi sle, %13, %c0_24 : index
    %99 = arith.subi %c0_24, %13 : index
    %100 = arith.subi %13, %c1_25 : index
    %101 = arith.select %98, %99, %100 : index
    %102 = arith.divsi %101, %c128_23 : index
    %103 = arith.subi %c0_24, %102 : index
    %104 = arith.addi %102, %c1_25 : index
    %105 = arith.select %98, %103, %104 : index
    %c0_26 = arith.constant 0 : index
    %c-1_27 = arith.constant -1 : index
    %106 = arith.cmpi slt, %workgroup_id_x, %c0_26 : index
    %107 = arith.subi %c-1_27, %workgroup_id_x : index
    %108 = arith.select %106, %107, %workgroup_id_x : index
    %109 = arith.divsi %108, %105 : index
    %110 = arith.subi %c-1_27, %109 : index
    %111 = arith.select %106, %110, %109 : index
    %c32_28 = arith.constant 32 : index
    %112 = arith.muli %111, %c32_28 : index
    %c8_29 = arith.constant 8 : index
    %c0_30 = arith.constant 0 : index
    %c1_31 = arith.constant 1 : index
    %113 = arith.cmpi sle, %33, %c0_30 : index
    %114 = arith.subi %c0_30, %33 : index
    %115 = arith.subi %33, %c1_31 : index
    %116 = arith.select %113, %114, %115 : index
    %117 = arith.divsi %116, %c8_29 : index
    %118 = arith.subi %c0_30, %117 : index
    %119 = arith.addi %117, %c1_31 : index
    %120 = arith.select %113, %118, %119 : index
    %121 = arith.muli %51, %120 : index
    %122 = arith.addi %112, %121 : index
    %c128_32 = arith.constant 128 : index
    %c0_33 = arith.constant 0 : index
    %c1_34 = arith.constant 1 : index
    %123 = arith.cmpi sle, %13, %c0_33 : index
    %124 = arith.subi %c0_33, %13 : index
    %125 = arith.subi %13, %c1_34 : index
    %126 = arith.select %123, %124, %125 : index
    %127 = arith.divsi %126, %c128_32 : index
    %128 = arith.subi %c0_33, %127 : index
    %129 = arith.addi %127, %c1_34 : index
    %130 = arith.select %123, %128, %129 : index
    %131 = arith.remsi %workgroup_id_x, %130 : index
    %c0_35 = arith.constant 0 : index
    %132 = arith.cmpi slt, %131, %c0_35 : index
    %133 = arith.addi %131, %130 : index
    %134 = arith.select %132, %133, %131 : index
    %c128_36 = arith.constant 128 : index
    %135 = arith.muli %134, %c128_36 : index
    %c32_37 = arith.constant 32 : index
    %c0_38 = arith.constant 0 : index
    %c1_39 = arith.constant 1 : index
    %136 = arith.cmpi sle, %49, %c0_38 : index
    %137 = arith.subi %c0_38, %49 : index
    %138 = arith.subi %49, %c1_39 : index
    %139 = arith.select %136, %137, %138 : index
    %140 = arith.divsi %139, %c32_37 : index
    %141 = arith.subi %c0_38, %140 : index
    %142 = arith.addi %140, %c1_39 : index
    %143 = arith.select %136, %141, %142 : index
    %144 = arith.muli %50, %143 : index
    %145 = arith.addi %135, %144 : index
    %subview = memref.subview %15[%122, %145] [%74, %97] [1, 1] : memref<?x?xf32, #gpu.address_space<global>> to memref<?x?xf32, strided<[?, 1], offset: ?>, #gpu.address_space<global>>
    scf.for %arg0 = %c0 to %74 step %c1 {
      scf.for %arg1 = %c0 to %97 step %c1 {
        memref.store %cst, %subview[%arg0, %arg1] : memref<?x?xf32, strided<[?, 1], offset: ?>, #gpu.address_space<global>>
      }
    }
    scf.for %arg0 = %c0 to %13 step %c1 {
      %subview_40 = memref.subview %14[%122, %arg0] [%74, 1] [1, 1] : memref<?x?xf32, #gpu.address_space<global>> to memref<?x1xf32, strided<[?, 1], offset: ?>, #gpu.address_space<global>>
      %subview_41 = memref.subview %14[%arg0, %145] [1, %97] [1, 1] : memref<?x?xf32, #gpu.address_space<global>> to memref<1x?xf32, strided<[?, 1], offset: ?>, #gpu.address_space<global>>
      scf.for %arg1 = %c0 to %74 step %c1 {
        scf.for %arg2 = %c0 to %97 step %c1 {
          %146 = memref.load %subview_40[%arg1, %c0] : memref<?x1xf32, strided<[?, 1], offset: ?>, #gpu.address_space<global>>
          %147 = memref.load %subview_41[%c0, %arg2] : memref<1x?xf32, strided<[?, 1], offset: ?>, #gpu.address_space<global>>
          %148 = memref.load %subview[%arg1, %arg2] : memref<?x?xf32, strided<[?, 1], offset: ?>, #gpu.address_space<global>>
          %149 = arith.mulf %146, %147 : f32
          %150 = arith.addf %148, %149 : f32
          memref.store %150, %subview[%arg1, %arg2] : memref<?x?xf32, strided<[?, 1], offset: ?>, #gpu.address_space<global>>
        }
      }
    }
    return
  }
}

