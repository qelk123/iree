
module {
  func.func @main_dispatch_0_matmul_DxDxD_f32() {
    %c8 = arith.constant 8 : index
    %c-128 = arith.constant -128 : index
    %c-32 = arith.constant -32 : index
    %c-1 = arith.constant -1 : index
    %c128 = arith.constant 128 : index
    %c32 = arith.constant 32 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32_i64 = arith.constant 32 : i64
    %cst = arith.constant 0.000000e+00 : f32
    %0 = hal.interface.constant.load[0] : i32
    %1 = hal.interface.constant.load[1] : i32
    %2 = hal.interface.constant.load[2] : i32
    %3 = hal.interface.constant.load[3] : i32
    %4 = arith.extui %0 : i32 to i64
    %5 = arith.extui %1 : i32 to i64
    %6 = arith.shli %5, %c32_i64 : i64
    %7 = arith.ori %4, %6 : i64
    %8 = arith.index_castui %7 : i64 to index
    %9 = arith.extui %2 : i32 to i64
    %10 = arith.extui %3 : i32 to i64
    %11 = arith.shli %10, %c32_i64 : i64
    %12 = arith.ori %9, %11 : i64
    %13 = arith.index_castui %12 : i64 to index
    %14 = hal.interface.binding.subspan set(0) binding(0) type(storage_buffer) alignment(64) offset(%c0) flags(ReadOnly) : memref<?x?xf32, #gpu.address_space<global>>{%8, %13}
    memref.assume_alignment %14, 64 : memref<?x?xf32, #gpu.address_space<global>>
    %15 = hal.interface.binding.subspan set(0) binding(1) type(storage_buffer) alignment(64) offset(%c0) : memref<?x?xf32, #gpu.address_space<global>>{%8, %13}
    memref.assume_alignment %15, 64 : memref<?x?xf32, #gpu.address_space<global>>
    %workgroup_id_x = hal.interface.workgroup.id[0] : index
    %16 = arith.cmpi sle, %13, %c0 : index
    %17 = arith.subi %c0, %13 : index
    %18 = arith.subi %13, %c1 : index
    %19 = arith.select %16, %17, %18 : index
    %20 = arith.divsi %19, %c128 : index
    %21 = arith.subi %c0, %20 : index
    %22 = arith.addi %20, %c1 : index
    %23 = arith.select %16, %21, %22 : index
    %24 = arith.cmpi slt, %workgroup_id_x, %c0 : index
    %25 = arith.subi %c-1, %workgroup_id_x : index
    %26 = arith.select %24, %25, %workgroup_id_x : index
    %27 = arith.divsi %26, %23 : index
    %28 = arith.subi %c-1, %27 : index
    %29 = arith.select %24, %28, %27 : index
    %30 = arith.muli %29, %c-32 : index
    %31 = arith.addi %8, %30 : index
    %32 = arith.cmpi sgt, %31, %c32 : index
    %33 = arith.select %32, %c32, %31 : index
    %34 = arith.cmpi sle, %13, %c0 : index
    %35 = arith.subi %c0, %13 : index
    %36 = arith.subi %13, %c1 : index
    %37 = arith.select %34, %35, %36 : index
    %38 = arith.divsi %37, %c128 : index
    %39 = arith.subi %c0, %38 : index
    %40 = arith.addi %38, %c1 : index
    %41 = arith.select %34, %39, %40 : index
    %42 = arith.remsi %workgroup_id_x, %41 : index
    %43 = arith.cmpi slt, %42, %c0 : index
    %44 = arith.addi %42, %41 : index
    %45 = arith.select %43, %44, %42 : index
    %46 = arith.muli %45, %c-128 : index
    %47 = arith.addi %13, %46 : index
    %48 = arith.cmpi sgt, %47, %c128 : index
    %49 = arith.select %48, %c128, %47 : index
    %50 = gpu.thread_id  x
    %51 = gpu.thread_id  y
    %52 = arith.cmpi sle, %33, %c0 : index
    %53 = arith.subi %c0, %33 : index
    %54 = arith.subi %33, %c1 : index
    %55 = arith.select %52, %53, %54 : index
    %56 = arith.divsi %55, %c8 : index
    %57 = arith.subi %c0, %56 : index
    %58 = arith.addi %56, %c1 : index
    %59 = arith.select %52, %57, %58 : index
    %60 = arith.muli %51, %59 : index
    %61 = arith.subi %33, %60 : index
    %62 = arith.cmpi sle, %33, %c0 : index
    %63 = arith.subi %c0, %33 : index
    %64 = arith.subi %33, %c1 : index
    %65 = arith.select %62, %63, %64 : index
    %66 = arith.divsi %65, %c8 : index
    %67 = arith.subi %c0, %66 : index
    %68 = arith.addi %66, %c1 : index
    %69 = arith.select %62, %67, %68 : index
    %70 = arith.cmpi slt, %61, %69 : index
    %71 = arith.select %70, %61, %69 : index
    %72 = arith.cmpi slt, %71, %c0 : index
    %73 = arith.select %72, %c0, %71 : index
    %74 = arith.cmpi sle, %49, %c0 : index
    %75 = arith.subi %c0, %49 : index
    %76 = arith.subi %49, %c1 : index
    %77 = arith.select %74, %75, %76 : index
    %78 = arith.divsi %77, %c32 : index
    %79 = arith.subi %c0, %78 : index
    %80 = arith.addi %78, %c1 : index
    %81 = arith.select %74, %79, %80 : index
    %82 = arith.muli %50, %81 : index
    %83 = arith.subi %49, %82 : index
    %84 = arith.cmpi sle, %49, %c0 : index
    %85 = arith.subi %c0, %49 : index
    %86 = arith.subi %49, %c1 : index
    %87 = arith.select %84, %85, %86 : index
    %88 = arith.divsi %87, %c32 : index
    %89 = arith.subi %c0, %88 : index
    %90 = arith.addi %88, %c1 : index
    %91 = arith.select %84, %89, %90 : index
    %92 = arith.cmpi slt, %83, %91 : index
    %93 = arith.select %92, %83, %91 : index
    %94 = arith.cmpi slt, %93, %c0 : index
    %95 = arith.select %94, %c0, %93 : index
    %96 = arith.cmpi sle, %13, %c0 : index
    %97 = arith.subi %c0, %13 : index
    %98 = arith.subi %13, %c1 : index
    %99 = arith.select %96, %97, %98 : index
    %100 = arith.divsi %99, %c128 : index
    %101 = arith.subi %c0, %100 : index
    %102 = arith.addi %100, %c1 : index
    %103 = arith.select %96, %101, %102 : index
    %104 = arith.cmpi slt, %workgroup_id_x, %c0 : index
    %105 = arith.subi %c-1, %workgroup_id_x : index
    %106 = arith.select %104, %105, %workgroup_id_x : index
    %107 = arith.divsi %106, %103 : index
    %108 = arith.subi %c-1, %107 : index
    %109 = arith.select %104, %108, %107 : index
    %110 = arith.muli %109, %c32 : index
    %111 = arith.cmpi sle, %33, %c0 : index
    %112 = arith.subi %c0, %33 : index
    %113 = arith.subi %33, %c1 : index
    %114 = arith.select %111, %112, %113 : index
    %115 = arith.divsi %114, %c8 : index
    %116 = arith.subi %c0, %115 : index
    %117 = arith.addi %115, %c1 : index
    %118 = arith.select %111, %116, %117 : index
    %119 = arith.muli %51, %118 : index
    %120 = arith.addi %110, %119 : index
    %121 = arith.cmpi sle, %13, %c0 : index
    %122 = arith.subi %c0, %13 : index
    %123 = arith.subi %13, %c1 : index
    %124 = arith.select %121, %122, %123 : index
    %125 = arith.divsi %124, %c128 : index
    %126 = arith.subi %c0, %125 : index
    %127 = arith.addi %125, %c1 : index
    %128 = arith.select %121, %126, %127 : index
    %129 = arith.remsi %workgroup_id_x, %128 : index
    %130 = arith.cmpi slt, %129, %c0 : index
    %131 = arith.addi %129, %128 : index
    %132 = arith.select %130, %131, %129 : index
    %133 = arith.muli %132, %c128 : index
    %134 = arith.cmpi sle, %49, %c0 : index
    %135 = arith.subi %c0, %49 : index
    %136 = arith.subi %49, %c1 : index
    %137 = arith.select %134, %135, %136 : index
    %138 = arith.divsi %137, %c32 : index
    %139 = arith.subi %c0, %138 : index
    %140 = arith.addi %138, %c1 : index
    %141 = arith.select %134, %139, %140 : index
    %142 = arith.muli %50, %141 : index
    %143 = arith.addi %133, %142 : index
    %subview = memref.subview %15[%120, %143] [%73, %95] [1, 1] : memref<?x?xf32, #gpu.address_space<global>> to memref<?x?xf32, strided<[?, 1], offset: ?>, #gpu.address_space<global>>
    scf.for %arg0 = %c0 to %73 step %c1 {
      scf.for %arg1 = %c0 to %95 step %c1 {
        memref.store %cst, %subview[%arg0, %arg1] : memref<?x?xf32, strided<[?, 1], offset: ?>, #gpu.address_space<global>>
      }
    }
    scf.for %arg0 = %c0 to %13 step %c1 {
      %subview_0 = memref.subview %14[%120, %arg0] [%73, 1] [1, 1] : memref<?x?xf32, #gpu.address_space<global>> to memref<?x1xf32, strided<[?, 1], offset: ?>, #gpu.address_space<global>>
      %subview_1 = memref.subview %14[%arg0, %143] [1, %95] [1, 1] : memref<?x?xf32, #gpu.address_space<global>> to memref<1x?xf32, strided<[?, 1], offset: ?>, #gpu.address_space<global>>
      scf.for %arg1 = %c0 to %73 step %c1 {
        scf.for %arg2 = %c0 to %95 step %c1 {
          %144 = memref.load %subview_0[%arg1, %c0] : memref<?x1xf32, strided<[?, 1], offset: ?>, #gpu.address_space<global>>
          %145 = memref.load %subview_1[%c0, %arg2] : memref<1x?xf32, strided<[?, 1], offset: ?>, #gpu.address_space<global>>
          %146 = memref.load %subview[%arg1, %arg2] : memref<?x?xf32, strided<[?, 1], offset: ?>, #gpu.address_space<global>>
          %147 = arith.mulf %144, %145 : f32
          %148 = arith.addf %146, %147 : f32
          memref.store %148, %subview[%arg1, %arg2] : memref<?x?xf32, strided<[?, 1], offset: ?>, #gpu.address_space<global>>
        }
      }
    }
    return
  }
}

